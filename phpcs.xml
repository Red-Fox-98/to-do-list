<?xml version="1.0"?>
<ruleset name="CodingStandard">
    <description>The coding standard.</description>

    <file>app</file>
    <file>config</file>
    <file>database</file>
    <file>routes</file>
    <file>tests</file>

    <arg name="basepath" value="."/>
    <arg name="colors"/>
    <arg name="parallel" value="75"/>
    <arg value="np"/>

    <config name="installed_paths" value="vendor/phpcompatibility/php-compatibility,vendor/slevomat/coding-standard"/>

    <rule ref="PHPCompatibility"/>
    <config name="testVersion" value="8.1-"/>

    <rule ref="PSR2">
        <!-- PSR2 не поддерживает импортирование классов через фигурные собки !-->
        <exclude name="PSR2.Namespaces.UseDeclaration"/>
        <!-- Многострочные условия конфликтуют с правилом PSR12.ControlStructures.ControlStructureSpacing.FirstExpressionLine !-->
        <exclude name="PSR2.ControlStructures.ControlStructureSpacing.SpacingAfterOpenBrace" />
    </rule>

    <!-- Запрещаем использовать ряд функций !-->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property phpcs-only="true" name="forbiddenFunctions" type="array"
                      value="print=>echo,create_function=>null,eval=>null,exec=>null,system=>null"/>
        </properties>
    </rule>

    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="ignoreComments" value="false"/>
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="0"/>
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <!-- Ограничиваем максимальную вложенность при использовании {} в идеале, эта цифра должна быть в пределах 5-8 !-->
    <rule ref="Generic.Metrics.NestingLevel">
        <properties>
            <property phpcs-only="true" name="nestingLevel" value="4"/>
            <property phpcs-only="true" name="absoluteNestingLevel" value="5"/>
        </properties>
    </rule>

    <rule ref="Generic.NamingConventions.CamelCapsFunctionName">
        <properties>
            <property phpcs-only="true" name="strict" value="true"/>
        </properties>
    </rule>

    <!-- Если конкатенация избыточна (за исключением переноса на другую строку), то считаем это ошибкой !-->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <properties>
            <property name="allowMultiline" value="true"/>
            <property name="error" value="false"/>
        </properties>
    </rule>
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <rule ref="Generic.PHP.DisallowShortOpenTag"/>

    <!-- Отключаем GOTO !-->
    <rule ref="Generic.PHP.DiscourageGoto"/>

    <!-- Запрещаем подавление ошибок через @ !-->
    <rule ref="Generic.PHP.NoSilencedErrors"/>

    <!-- Проверяем на наличие пустых условий !-->
    <rule ref="Generic.CodeAnalysis.EmptyStatement"/>

    <!-- Короткий синтаксис при объявлении массивов !-->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

    <!-- Проверяем всегда ли условие возвращает true/false !-->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>

    <!-- Если класс объявлен как final, то метод объявлять финальным уже не нужно !-->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>

    <!-- Если метод переопределяется, и внутри него вызывается только родительский метод, то такое нам не нужно !-->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>

    <!-- А вдруг у нас кто-то в файле создаст несколько одноименных классов?) !-->
    <rule ref="Generic.Classes.DuplicateClassName"/>

    <!-- Запрещаем испльзовать циклы for без условия (это должен быть while) !-->
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>

    <!-- Во вложенных циклах счетчики должны быть с разными именами !-->
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>

    <!-- Запрещаем использовать оператор присовения в условиях !-->
    <rule ref="Generic.CodeAnalysis.AssignmentInCondition"/>

    <!-- Запречаем использовать echo как функцию !-->
    <rule ref="Squiz.Strings.EchoedStrings"/>

    <!-- После вызова echo, print, return, include, include_once, require, require_once необходим пробел !-->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>

    <!-- Между объявленными функциями (методами) необходимо наличие пустой строки !-->
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="spacingAfterLast" value="0"/>
            <property name="spacingBeforeFirst" value="0"/>
        </properties>
    </rule>

    <!-- Перед точкой с запятой в конце строки не должно быть пробела !-->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

    <!-- При обращении к методу объекта не должно быть пробелов между оператором объекта "->", методом и самим объектом !-->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Необходимо использование пробелов между операторами сравнения/присвоения !-->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Приводя тип нельзя использовать пробелы между скобками и самим типом. Необходимо писать (int) вместо ( int ) !-->
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>

    <!-- Запрещаем использовать двойные кавычки если не используется подстановка переменных внутри при помощи {}  !-->
    <rule ref="Squiz.Strings.DoubleQuoteUsage.NotRequired"/>

    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="requiredSpacesAfterOpen" value="0"/>
            <property name="requiredSpacesBeforeClose" value="0"/>
            <property name="equalsSpacing" value="1"/>
        </properties>
    </rule>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>

    <!-- Запрещаем использовать закрывающий PHP тег ?> в файлах !-->
    <rule ref="Zend.Files.ClosingTag"/>

    <!--
        Если вызов метода переносится на другую строчку, то делать это нужно вместе с "->". Например
        Правильно: (new \stdClass())->help()
            ->c();
        Неправильно: (new \stdClass())->help()->
            c();
    !-->
    <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent"/>

    <!--
        Запрещаем использовать дефолтные комментарии PhpStorm в стиле:
        - Created by PhpStorm.
        - Constructor.
    !-->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments"/>

    <!-- Пустых комментариев в коде не должно быть !-->
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>


    <!-- До и после use требуем поставить пустую строчку !-->
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="1"/>
            <property name="linesCountBetweenUseTypes" value="1"/>
            <property name="linesCountAfterLastUse" value="1"/>
        </properties>
    </rule>

    <!-- Требует наличия пустой строки до и после объявления namespace !-->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing">
        <properties>
            <property name="linesCountBeforeNamespace" value="1"/>
            <property name="linesCountAfterNamespace" value="1"/>
        </properties>
    </rule>

    <!-- Проверяет отступы при объявлении namespace и запрещает использовать скобки {} !-->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration"/>

    <!-- При импорте класса не должно быть начального слеша \ !-->
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>

    <!-- Не более 1 namespace в файле !-->
    <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile"/>

    <!-- Проверяем отступы между типом параметра и самим именем параметра в методах и функциях !-->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>

    <!-- Настраиваем пустые строки между свойствами объектов !-->
    <rule ref="SlevomatCodingStandard.Classes.PropertySpacing">
        <properties>
            <property name="minLinesCountBeforeWithComment" value="1"/>
            <property name="maxLinesCountBeforeWithComment" value="1"/>
            <property name="minLinesCountBeforeWithoutComment" value="0"/>
            <property name="maxLinesCountBeforeWithoutComment" value="1"/>
        </properties>
    </rule>

    <!-- Убираем из лишние аннотации !-->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array"
                      value="@author,@created,@version,@package,@copyright,@license"/>
        </properties>
    </rule>

    <!-- Запрещает напрямую работать с супрглобальными массивами !-->
    <rule ref="SlevomatCodingStandard.Variables.DisallowSuperGlobalVariable"/>

    <!-- Находит пустые try-catch блоки которые по сути тоже самое, что и подавление ошибок через @ !-->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>

    <!-- Требует запятую в многострочных массивах после последнего элемента !-->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>

    <!-- Заставляет использовать короткую запись тернарного оператора при сравнении с null !-->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator"/>

    <!-- Просит использовать тернарный оператор если это возможно !-->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireTernaryOperator"/>

    <!--
        Проверяет возможно ли использование раннего выхода (на сложных условиях путается и входит в рекурсию)
        foreach ($data as $key => $value)
        {
          if (empty($value)) {
            continue;
          }

          if ($value === time()) {
            // ...
            continue;
          }

          if ($value === $key) {
            // ....
            continue;
          }
        }
    !-->
    <rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit"/>

    <!-- Требует использовать жесткое сравнение с учетом типа === или !== вместо мягкого == или != !-->
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>

    <!-- Разрешает использование инкремента и декремента только в простых констуркциях, чтобы не превращять код в BrainFuck !-->
    <rule ref="SlevomatCodingStandard.Operators.RequireOnlyStandaloneIncrementAndDecrementOperators"/>

    <!-- Для перфоманса просит вызывать некоторые методы без распаковки !-->
    <!--<rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking" />-->

    <!-- При импорте классов из одного неймспейса просит выполнить рефакторинг !-->
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>

    <!-- Запрещает импортировать классы в namespace и при подмене присваивать им такое же имя как в оригинале !-->
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias"/>

    <!-- Поиск неиспользуемых импортированных классов через use !-->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <!-- Включаем поиск по аннотациям !-->
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>

    <!-- Запрещает неявное создание массивов !-->
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation"/>

    <!-- Поиск неиспользуемых переменных закинутых в замыканиче через use !-->
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>

    <!-- Константы классов должны объявляться с указанием области видимости !-->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility"/>

    <!-- Если указан типо возвращаеммых данных из метода, то проверяем где стоит двоеточие!-->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing"/>

    <!-- Типы должны быть указаны в нижнем регистре !-->
    <rule ref="Generic.PHP.LowerCaseType"/>

    <!-- Вызов функции в условиях цикла необходимо вынести за пределы цикла !-->
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>

    <!-- Отключаем mixed тип в phpDoc !-->
    <rule ref="SlevomatCodingStandard.TypeHints.DisallowMixedTypeHint"/>

    <!-- Отключаем ненужные phpdoc, которые дублируют декларацию методов !-->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint.UselessAnnotation" />

    <!-- Отключаем ненужные phpdoc, которые дублируют декларацию свойств объекта !-->
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint.UselessAnnotation" />

    <!-- Отключаем ненужные phpdoc, которые дублируют возвращаемый тип !-->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint.UselessAnnotation" />

    <!--
        Если в методе аргументу присвоен тип и указано значение по умолчанию null,
        то необходимо тип сделать nullable подставив вопрос.
        Правильно: ?int $var = null
        Неправильно: int $var = null

        Все круто, но это вызывает ошибку объявления класса, когда интерфейс объявлен без этого аргумента
    !-->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>

    <!-- Все классы должны быть импортированы в глобальную область видимости не допускается префикс \ в коде !-->
    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly.ReferenceViaFullyQualifiedName" />

    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="spacesCountAroundEqualsSign" value="0"/>
        </properties>
    </rule>

    <!-- Пустая строка перед использованием parent:: !-->
    <rule ref="SlevomatCodingStandard.Classes.ParentCallSpacing" />

    <!-- Настройка отступов у use при импорте трейтов !-->
    <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUseWhenFirstInClass" value="0" />
            <property name="linesCountAfterLastUseWhenLastInClass" value="0" />
        </properties>
    </rule>

    <!-- Убирает пустые строки в phpdoc !-->
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing" />

    <!-- Перед return должна быть пустая строка!-->
    <rule ref="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing" />

    <!-- Требуем использовать Throwable вместо Exception !-->
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly" />

    <!-- Все импортируемые классы должны быть отсортированы по алфавиту !-->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses" />

    <!-- Отключает запятую после последнего параметра при вызове функций !-->
    <rule ref="SlevomatCodingStandard.Functions.DisallowTrailingCommaInCall" />

    <!-- Замыкания без $this должны быть определены как static !-->
    <rule ref="SlevomatCodingStandard.Functions.StaticClosure" />

    <!-- Требует использовать запятую при объявлении методов и замыканий в несколько строк !-->
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInClosureUse" />
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInDeclaration" />

    <!-- Запрещает создавать пустые функции. Если это необходимо, то нужно оставить комментарий !-->
    <rule ref="SlevomatCodingStandard.Functions.DisallowEmptyFunction" />

    <!-- Настраивает отступы между стрелочными функциями. Правильно писать fn($param) => $param * 2; !-->
    <rule ref="SlevomatCodingStandard.Functions.ArrowFunctionDeclaration">
        <properties>
            <property name="spacesCountAfterKeyword" value="0" />
        </properties>
    </rule>

    <!-- Использовать in_array только в режиме со сравнением типов !-->
    <rule ref="SlevomatCodingStandard.Functions.StrictCall" />

    <!-- вместо if (...) return true; else return false; нужно использовать return (...); !-->
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn" />

    <!-- Использовать сокращенную конкатенацию $a .= 'b'; вместо $a = $a . 'b'; !-->
    <rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator" />

    <!-- Настраивает отступы при подстановке параметров функций по имени !-->
    <rule ref="SlevomatCodingStandard.Functions.NamedArgumentSpacing" />

    <!-- Если exception никак не используется в catch, то и переменную выделять не нужно !-->
    <rule ref="SlevomatCodingStandard.Exceptions.RequireNonCapturingCatch" />

    <!-- Запрещает использовать return(); !-->
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses" />

    <!-- После new нельзя использовать скобки new (ClassName); !-->
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses" />

    <!-- Настраивает отступы после ... при распаковке массивов !-->
    <rule ref="SlevomatCodingStandard.Operators.SpreadOperatorSpacing" />

    <!-- Проверяет, что в метод передается ненужное значение, которое и так равняется значению по умолчанию !-->
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue" />

    <!-- Запрещает использовать continue в switch-case без целочисленного параметра (с PHP 7.3 варнинг появился) !-->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch" />

    <!-- Конструкцию вида $obj === null ? null : $obj->call() нужно заменить на $obj?->call() !-->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullSafeObjectOperator" />

    <!-- Настраивает отступ после & при передаче переменной по ссылке !-->
    <rule ref="SlevomatCodingStandard.PHP.ReferenceSpacing" />

    <!-- Требуется использовать синтаксис nowdoc вместо heredoc !-->
    <rule ref="SlevomatCodingStandard.PHP.RequireNowdoc" />

    <!-- Короткий синтаксис [...] вместо list(...) !-->
    <rule ref="SlevomatCodingStandard.PHP.ShortList" />

    <!-- Ищет бесполезные круглые скобки в условиях !-->
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses" />

    <!-- Ищет бесполезные точки с запятой !-->
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon" />

    <!-- Запрещает писать $a ['b'] !-->
    <rule ref="SlevomatCodingStandard.Arrays.ArrayAccess" />

    <!-- Проверяет пробелы между элементами массивов и запятыми в однострочных массивах !-->
    <rule ref="SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace" />

    <!-- Поиск неиспользуемых переменных !-->
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable" />

    <!-- Поиск бесполезных переменных!-->
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable" />

    <!-- Поиск бесполеных аннотаций для констант !-->
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint" />

    <!-- При документировании многоуровневых массивов просит использовать джинерики !-->
    <rule ref="SlevomatCodingStandard.TypeHints.DisallowArrayTypeHintSyntax" />

    <!-- Проверяет отступы после : при объявлении возвращаемого типа !-->
    <rule ref="SlevomatCodingStandard.Classes.BackedEnumTypeSpacing" />

    <rule ref="PSR12">
        <!-- Необходимо использовать короткие имена для типов: integer -> int, boolean -> bool !-->
        <!--<rule ref="PSR12.Keywords.ShortFormTypeKeywords" />-->

        <!-- Разрешаем импортировать классы в namespace через фигурные собки !-->
        <!--<rule ref="PSR12.Namespaces.CompoundNamespaceDepth" />-->

        <!-- При объявлении nullable типа запрещено использовать пробел. Вместо "? int" следует писать "?int" !-->
        <!--<rule ref="PSR12.Functions.NullableTypeDeclaration" />-->

        <!-- PSR12.Operators.OperatorSpacing = Squiz.WhiteSpace.OperatorSpacing !-->
        <exclude name="PSR12.Operators.OperatorSpacing" />
    </rule>

</ruleset>
